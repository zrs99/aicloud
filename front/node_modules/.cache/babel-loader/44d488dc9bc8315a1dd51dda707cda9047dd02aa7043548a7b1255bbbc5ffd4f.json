{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pdf-container\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"loading\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.loadedImages, (image, index) => {\n    return _openBlock(), _createElementBlock(\"img\", {\n      key: index,\n      src: image,\n      class: \"pdf-page\"\n    }, null, 8 /* PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */)), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"加载中...\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","loadedImages","image","index","src","_hoisted_2","loading","_hoisted_3","_createCommentVNode"],"sources":["D:\\Study\\Code\\AICloud\\front\\src\\components\\PDFViewer.vue"],"sourcesContent":["<template>\r\n  <div class=\"pdf-container\">\r\n    <img\r\n      v-for=\"(image, index) in loadedImages\"\r\n      :key=\"index\"\r\n      :src=\"image\"\r\n      class=\"pdf-page\"\r\n    />\r\n    <div v-if=\"loading\" class=\"loading\">加载中...</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\n\r\nexport default {\r\n  setup() {\r\n    const loadedImages = ref([])\r\n    const loading = ref(false)\r\n    const currentPage = ref(0)\r\n    const totalPages = 10 // 假设PDF有10页\r\n\r\n    // 模拟获取PDF页面的图片\r\n    const getPageImage = (pageNumber) => {\r\n      return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(`/path-to-pdf-images/page-${pageNumber}.jpg`)\r\n        }, 500)\r\n      })\r\n    }\r\n\r\n    const loadMorePages = async () => {\r\n      if (loading.value || currentPage.value >= totalPages) return\r\n\r\n      loading.value = true\r\n      const pagesToLoad = Math.min(3, totalPages - currentPage.value)\r\n      const newImages = []\r\n\r\n      for (let i = 1; i <= pagesToLoad; i++) {\r\n        const image = await getPageImage(currentPage.value + i)\r\n        newImages.push(image)\r\n      }\r\n\r\n      loadedImages.value = [...loadedImages.value, ...newImages]\r\n      currentPage.value += pagesToLoad\r\n      loading.value = false\r\n    }\r\n\r\n    const handleScroll = () => {\r\n      const scrollPosition = window.scrollY + window.innerHeight\r\n      const documentHeight = document.documentElement.scrollHeight\r\n\r\n      if (documentHeight - scrollPosition < 500) {\r\n        loadMorePages()\r\n      }\r\n    }\r\n\r\n    onMounted(async () => {\r\n      await loadMorePages() // 初始加载\r\n      window.addEventListener('scroll', handleScroll)\r\n    })\r\n\r\n    onUnmounted(() => {\r\n      window.removeEventListener('scroll', handleScroll)\r\n    })\r\n\r\n    return {\r\n      loadedImages,\r\n      loading\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.pdf-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.pdf-page {\r\n  max-width: 100%;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.loading {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAe;mBAD5B;;EAAAC,GAAA;EAQwBD,KAAK,EAAC;;;uBAP5BE,mBAAA,CAQM,OARNC,UAQM,I,kBAPJD,mBAAA,CAKEE,SAAA,QAPNC,WAAA,CAG+BC,MAAA,CAAAC,YAAY,EAH3C,CAGcC,KAAK,EAAEC,KAAK;yBADtBP,mBAAA,CAKE;MAHCD,GAAG,EAAEQ,KAAK;MACVC,GAAG,EAAEF,KAAK;MACXR,KAAK,EAAC;4BANZW,UAAA;kCAQeL,MAAA,CAAAM,OAAO,I,cAAlBV,mBAAA,CAAgD,OAAhDW,UAAgD,EAAZ,QAAM,KAR9CC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}