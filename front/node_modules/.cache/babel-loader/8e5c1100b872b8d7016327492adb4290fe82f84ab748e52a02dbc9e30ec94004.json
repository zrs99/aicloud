{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pdf-viewer-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"pdf-scroll-container\",\n    ref: \"scrollContainer\",\n    onScroll: _cache[0] || (_cache[0] = (...args) => $setup.handleScroll && $setup.handleScroll(...args))\n  }, [_createElementVNode(\"div\", {\n    class: \"pdf-pages-container\",\n    style: _normalizeStyle({\n      height: $setup.totalHeight + 'px'\n    })\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.visiblePages, page => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: page.pageNumber,\n      class: \"pdf-page-container\",\n      style: _normalizeStyle({\n        top: page.offset + 'px',\n        height: page.height + 'px'\n      })\n    }, [_createElementVNode(\"canvas\", {\n      ref_for: true,\n      ref: el => {\n        if (el) $setup.pageCanvases[page.pageNumber - 1] = el;\n      }\n    }, null, 512 /* NEED_PATCH */)], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */)], 544 /* NEED_HYDRATION, NEED_PATCH */), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"加载中...\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","ref","onScroll","_cache","args","$setup","handleScroll","style","_normalizeStyle","height","totalHeight","_Fragment","_renderList","visiblePages","page","pageNumber","top","offset","ref_for","el","pageCanvases","loading","_hoisted_2","_createCommentVNode"],"sources":["D:\\Study\\Code\\AICloud\\front\\src\\components\\socketTest.vue"],"sourcesContent":["<template>\r\n  <div class=\"pdf-viewer-container\">\r\n    <div class=\"pdf-scroll-container\" ref=\"scrollContainer\" @scroll=\"handleScroll\">\r\n      <div class=\"pdf-pages-container\" :style=\"{ height: totalHeight + 'px' }\">\r\n        <div\r\n          v-for=\"page in visiblePages\"\r\n          :key=\"page.pageNumber\"\r\n          class=\"pdf-page-container\"\r\n          :style=\"{ top: page.offset + 'px', height: page.height + 'px' }\"\r\n        >\r\n          <canvas :ref=\"el => { if (el) pageCanvases[page.pageNumber-1] = el }\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"loading\" class=\"loading-indicator\">加载中...</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\nexport default {\r\n  props: {\r\n    pdfUrl: {\r\n      type: String,\r\n      default: \"\",\r\n      required: true\r\n    },\r\n    scale: {\r\n      type: Number,\r\n      default: 1.5\r\n    }\r\n  },\r\n  setup(props) {\r\n    const scrollContainer = ref(null);\r\n    const pageCanvases = ref([]);\r\n    const pdfDoc = ref(null);\r\n    const pageCount = ref(0);\r\n    const totalHeight = ref(0);\r\n    const pageHeights = ref([]);\r\n    const pageOffsets = ref([]);\r\n    const visiblePages = ref([]);\r\n    const loading = ref(false);\r\n    const viewportHeight = ref(0);\r\n    const scrollPosition = ref(0);\r\n\r\n    // 初始化PDF.js\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdn.jsdelivr.net/npm/pdfjs-dist@2.11.338/build/pdf.worker.min.js';\r\n\r\n    // 加载PDF文档\r\n    const loadPDF = async () => {\r\n      loading.value = true;\r\n      try {\r\n        const loadingTask = pdfjsLib.getDocument(props.pdfUrl);\r\n        pdfDoc.value = await loadingTask.promise;\r\n        pageCount.value = pdfDoc.value.numPages;\r\n\r\n        // 计算每页高度和总高度\r\n        await calculatePageDimensions();\r\n\r\n        // 初始渲染可见页面\r\n        updateVisiblePages();\r\n      } catch (error) {\r\n        console.error('PDF加载失败:', error);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 计算每页高度和总高度\r\n    const calculatePageDimensions = async () => {\r\n      pageHeights.value = [];\r\n      pageOffsets.value = [];\r\n      let currentOffset = 0;\r\n\r\n      for (let i = 1; i <= pageCount.value; i++) {\r\n        const page = await pdfDoc.value.getPage(i);\r\n        const viewport = page.getViewport({ scale: props.scale });\r\n        const height = viewport.height;\r\n\r\n        pageHeights.value.push(height);\r\n        pageOffsets.value.push(currentOffset);\r\n        currentOffset += height;\r\n      }\r\n\r\n      totalHeight.value = currentOffset;\r\n    };\r\n\r\n    // 渲染单个页面\r\n    const renderPage = async (pageNumber) => {\r\n      if (!pdfDoc.value || pageNumber < 1 || pageNumber > pageCount.value) return;\r\n\r\n      const page = await pdfDoc.value.getPage(pageNumber);\r\n      const viewport = page.getViewport({ scale: props.scale });\r\n      const canvas = pageCanvases.value[pageNumber - 1];\r\n\r\n      if (!canvas) return;\r\n\r\n      canvas.height = viewport.height;\r\n      canvas.width = viewport.width;\r\n\r\n      const renderContext = {\r\n        canvasContext: canvas.getContext('2d'),\r\n        viewport: viewport\r\n      };\r\n\r\n      await page.render(renderContext).promise;\r\n    };\r\n\r\n    // 更新可见页面\r\n    const updateVisiblePages = () => {\r\n      if (!scrollContainer.value || pageHeights.value.length === 0) return;\r\n\r\n      viewportHeight.value = scrollContainer.value.clientHeight;\r\n      const scrollTop = scrollContainer.value.scrollTop;\r\n      scrollPosition.value = scrollTop;\r\n\r\n      // 计算可见范围（上下各扩展一屏）\r\n      const buffer = viewportHeight.value;\r\n      const startY = Math.max(0, scrollTop - buffer);\r\n      const endY = scrollTop + viewportHeight.value + buffer;\r\n\r\n      // 找出在可见范围内的页面\r\n      const newVisiblePages = [];\r\n      for (let i = 0; i < pageCount.value; i++) {\r\n        const pageStart = pageOffsets.value[i];\r\n        const pageEnd = pageStart + pageHeights.value[i];\r\n\r\n        if (pageEnd > startY && pageStart < endY) {\r\n          newVisiblePages.push({\r\n            pageNumber: i + 1,\r\n            offset: pageOffsets.value[i],\r\n            height: pageHeights.value[i]\r\n          });\r\n        }\r\n      }\r\n\r\n      visiblePages.value = newVisiblePages;\r\n\r\n      // 渲染可见页面\r\n      visiblePages.value.forEach(page => {\r\n        renderPage(page.pageNumber);\r\n      });\r\n    };\r\n\r\n    // 滚动事件处理\r\n    const handleScroll = () => {\r\n      if (!scrollContainer.value) return;\r\n\r\n      requestAnimationFrame(() => {\r\n        updateVisiblePages();\r\n      });\r\n    };\r\n\r\n    // 窗口大小变化处理\r\n    const handleResize = () => {\r\n      if (pdfDoc.value) {\r\n        calculatePageDimensions().then(() => {\r\n          updateVisiblePages();\r\n        });\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      loadPDF();\r\n      window.addEventListener('resize', handleResize);\r\n    });\r\n\r\n    onUnmounted(() => {\r\n      window.removeEventListener('resize', handleResize);\r\n    });\r\n\r\n    return {\r\n      scrollContainer,\r\n      pageCanvases,\r\n      pdfDoc,\r\n      pageCount,\r\n      totalHeight,\r\n      visiblePages,\r\n      loading,\r\n      handleScroll\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pdf-viewer-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n.pdf-scroll-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n}\r\n\r\n.pdf-pages-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.pdf-page-container {\r\n  position: absolute;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.pdf-page-container canvas {\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.loading-indicator {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAsB;;EADnCC,GAAA;EAcwBD,KAAK,EAAC;;;uBAb5BE,mBAAA,CAcM,OAdNC,UAcM,GAbJC,mBAAA,CAWM;IAXDJ,KAAK,EAAC,sBAAsB;IAACK,GAAG,EAAC,iBAAiB;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,YAAA,IAAAD,MAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MAC3EJ,mBAAA,CASM;IATDJ,KAAK,EAAC,qBAAqB;IAAEW,KAAK,EAH7CC,eAAA;MAAAC,MAAA,EAGyDJ,MAAA,CAAAK,WAAW;IAAA;yBAC5DZ,mBAAA,CAOMa,SAAA,QAXdC,WAAA,CAKyBP,MAAA,CAAAQ,YAAY,EAApBC,IAAI;yBADbhB,mBAAA,CAOM;MALHD,GAAG,EAAEiB,IAAI,CAACC,UAAU;MACrBnB,KAAK,EAAC,oBAAoB;MACzBW,KAAK,EARhBC,eAAA;QAAAQ,GAAA,EAQyBF,IAAI,CAACG,MAAM;QAAAR,MAAA,EAAiBK,IAAI,CAACL,MAAM;MAAA;QAEtDT,mBAAA,CAA+E;MAVzFkB,OAAA;MAUmBjB,GAAG,EAAEkB,EAAE;QAAA,IAAUA,EAAE,EAAEd,MAAA,CAAAe,YAAY,CAACN,IAAI,CAACC,UAAU,QAAMI,EAAE;MAAA;;2FAI7Dd,MAAA,CAAAgB,OAAO,I,cAAlBvB,mBAAA,CAA0D,OAA1DwB,UAA0D,EAAZ,QAAM,KAdxDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}