{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport * as pdfjsLib from 'pdfjs-dist';\nexport default {\n  props: {\n    pdfUrl: {\n      type: String,\n      default: \"\",\n      required: true\n    },\n    scale: {\n      type: Number,\n      default: 1.5\n    }\n  },\n  setup(props) {\n    const scrollContainer = ref(null);\n    const pageCanvases = ref([]);\n    const pdfDoc = ref(null);\n    const pageCount = ref(0);\n    const totalHeight = ref(0);\n    const pageHeights = ref([]);\n    const pageOffsets = ref([]);\n    const visiblePages = ref([]);\n    const loading = ref(false);\n    const viewportHeight = ref(0);\n    const scrollPosition = ref(0);\n\n    // 初始化PDF.js\n    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdn.jsdelivr.net/npm/pdfjs-dist@2.11.338/build/pdf.worker.min.js';\n\n    // 加载PDF文档\n    const loadPDF = async () => {\n      loading.value = true;\n      try {\n        const loadingTask = pdfjsLib.getDocument(props.pdfUrl);\n        pdfDoc.value = await loadingTask.promise;\n        pageCount.value = pdfDoc.value.numPages;\n\n        // 计算每页高度和总高度\n        await calculatePageDimensions();\n\n        // 初始渲染可见页面\n        updateVisiblePages();\n      } catch (error) {\n        console.error('PDF加载失败:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 计算每页高度和总高度\n    const calculatePageDimensions = async () => {\n      pageHeights.value = [];\n      pageOffsets.value = [];\n      let currentOffset = 0;\n      for (let i = 1; i <= pageCount.value; i++) {\n        const page = await pdfDoc.value.getPage(i);\n        const viewport = page.getViewport({\n          scale: props.scale\n        });\n        const height = viewport.height;\n        pageHeights.value.push(height);\n        pageOffsets.value.push(currentOffset);\n        currentOffset += height;\n      }\n      totalHeight.value = currentOffset;\n    };\n\n    // 渲染单个页面\n    const renderPage = async pageNumber => {\n      if (!pdfDoc.value || pageNumber < 1 || pageNumber > pageCount.value) return;\n      const page = await pdfDoc.value.getPage(pageNumber);\n      const viewport = page.getViewport({\n        scale: props.scale\n      });\n      const canvas = pageCanvases.value[pageNumber - 1];\n      if (!canvas) return;\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      const renderContext = {\n        canvasContext: canvas.getContext('2d'),\n        viewport: viewport\n      };\n      await page.render(renderContext).promise;\n    };\n\n    // 更新可见页面\n    const updateVisiblePages = () => {\n      if (!scrollContainer.value || pageHeights.value.length === 0) return;\n      viewportHeight.value = scrollContainer.value.clientHeight;\n      const scrollTop = scrollContainer.value.scrollTop;\n      scrollPosition.value = scrollTop;\n\n      // 计算可见范围（上下各扩展一屏）\n      const buffer = viewportHeight.value;\n      const startY = Math.max(0, scrollTop - buffer);\n      const endY = scrollTop + viewportHeight.value + buffer;\n\n      // 找出在可见范围内的页面\n      const newVisiblePages = [];\n      for (let i = 0; i < pageCount.value; i++) {\n        const pageStart = pageOffsets.value[i];\n        const pageEnd = pageStart + pageHeights.value[i];\n        if (pageEnd > startY && pageStart < endY) {\n          newVisiblePages.push({\n            pageNumber: i + 1,\n            offset: pageOffsets.value[i],\n            height: pageHeights.value[i]\n          });\n        }\n      }\n      visiblePages.value = newVisiblePages;\n\n      // 渲染可见页面\n      visiblePages.value.forEach(page => {\n        renderPage(page.pageNumber);\n      });\n    };\n\n    // 滚动事件处理\n    const handleScroll = () => {\n      if (!scrollContainer.value) return;\n      requestAnimationFrame(() => {\n        updateVisiblePages();\n      });\n    };\n\n    // 窗口大小变化处理\n    const handleResize = () => {\n      if (pdfDoc.value) {\n        calculatePageDimensions().then(() => {\n          updateVisiblePages();\n        });\n      }\n    };\n    onMounted(() => {\n      loadPDF();\n      window.addEventListener('resize', handleResize);\n    });\n    onUnmounted(() => {\n      window.removeEventListener('resize', handleResize);\n    });\n    return {\n      scrollContainer,\n      pageCanvases,\n      pdfDoc,\n      pageCount,\n      totalHeight,\n      visiblePages,\n      loading,\n      handleScroll\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","pdfjsLib","props","pdfUrl","type","String","default","required","scale","Number","setup","scrollContainer","pageCanvases","pdfDoc","pageCount","totalHeight","pageHeights","pageOffsets","visiblePages","loading","viewportHeight","scrollPosition","GlobalWorkerOptions","workerSrc","loadPDF","value","loadingTask","getDocument","promise","numPages","calculatePageDimensions","updateVisiblePages","error","console","currentOffset","i","page","getPage","viewport","getViewport","height","push","renderPage","pageNumber","canvas","width","renderContext","canvasContext","getContext","render","length","clientHeight","scrollTop","buffer","startY","Math","max","endY","newVisiblePages","pageStart","pageEnd","offset","forEach","handleScroll","requestAnimationFrame","handleResize","then","window","addEventListener","removeEventListener"],"sources":["D:\\Study\\Code\\AICloud\\front\\src\\components\\socketTest.vue"],"sourcesContent":["<template>\r\n  <div class=\"pdf-viewer-container\">\r\n    <div class=\"pdf-scroll-container\" ref=\"scrollContainer\" @scroll=\"handleScroll\">\r\n      <div class=\"pdf-pages-container\" :style=\"{ height: totalHeight + 'px' }\">\r\n        <div\r\n          v-for=\"page in visiblePages\"\r\n          :key=\"page.pageNumber\"\r\n          class=\"pdf-page-container\"\r\n          :style=\"{ top: page.offset + 'px', height: page.height + 'px' }\"\r\n        >\r\n          <canvas :ref=\"el => { if (el) pageCanvases[page.pageNumber-1] = el }\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"loading\" class=\"loading-indicator\">加载中...</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted } from 'vue';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\nexport default {\r\n  props: {\r\n    pdfUrl: {\r\n      type: String,\r\n      default: \"\",\r\n      required: true\r\n    },\r\n    scale: {\r\n      type: Number,\r\n      default: 1.5\r\n    }\r\n  },\r\n  setup(props) {\r\n    const scrollContainer = ref(null);\r\n    const pageCanvases = ref([]);\r\n    const pdfDoc = ref(null);\r\n    const pageCount = ref(0);\r\n    const totalHeight = ref(0);\r\n    const pageHeights = ref([]);\r\n    const pageOffsets = ref([]);\r\n    const visiblePages = ref([]);\r\n    const loading = ref(false);\r\n    const viewportHeight = ref(0);\r\n    const scrollPosition = ref(0);\r\n\r\n    // 初始化PDF.js\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdn.jsdelivr.net/npm/pdfjs-dist@2.11.338/build/pdf.worker.min.js';\r\n\r\n    // 加载PDF文档\r\n    const loadPDF = async () => {\r\n      loading.value = true;\r\n      try {\r\n        const loadingTask = pdfjsLib.getDocument(props.pdfUrl);\r\n        pdfDoc.value = await loadingTask.promise;\r\n        pageCount.value = pdfDoc.value.numPages;\r\n\r\n        // 计算每页高度和总高度\r\n        await calculatePageDimensions();\r\n\r\n        // 初始渲染可见页面\r\n        updateVisiblePages();\r\n      } catch (error) {\r\n        console.error('PDF加载失败:', error);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 计算每页高度和总高度\r\n    const calculatePageDimensions = async () => {\r\n      pageHeights.value = [];\r\n      pageOffsets.value = [];\r\n      let currentOffset = 0;\r\n\r\n      for (let i = 1; i <= pageCount.value; i++) {\r\n        const page = await pdfDoc.value.getPage(i);\r\n        const viewport = page.getViewport({ scale: props.scale });\r\n        const height = viewport.height;\r\n\r\n        pageHeights.value.push(height);\r\n        pageOffsets.value.push(currentOffset);\r\n        currentOffset += height;\r\n      }\r\n\r\n      totalHeight.value = currentOffset;\r\n    };\r\n\r\n    // 渲染单个页面\r\n    const renderPage = async (pageNumber) => {\r\n      if (!pdfDoc.value || pageNumber < 1 || pageNumber > pageCount.value) return;\r\n\r\n      const page = await pdfDoc.value.getPage(pageNumber);\r\n      const viewport = page.getViewport({ scale: props.scale });\r\n      const canvas = pageCanvases.value[pageNumber - 1];\r\n\r\n      if (!canvas) return;\r\n\r\n      canvas.height = viewport.height;\r\n      canvas.width = viewport.width;\r\n\r\n      const renderContext = {\r\n        canvasContext: canvas.getContext('2d'),\r\n        viewport: viewport\r\n      };\r\n\r\n      await page.render(renderContext).promise;\r\n    };\r\n\r\n    // 更新可见页面\r\n    const updateVisiblePages = () => {\r\n      if (!scrollContainer.value || pageHeights.value.length === 0) return;\r\n\r\n      viewportHeight.value = scrollContainer.value.clientHeight;\r\n      const scrollTop = scrollContainer.value.scrollTop;\r\n      scrollPosition.value = scrollTop;\r\n\r\n      // 计算可见范围（上下各扩展一屏）\r\n      const buffer = viewportHeight.value;\r\n      const startY = Math.max(0, scrollTop - buffer);\r\n      const endY = scrollTop + viewportHeight.value + buffer;\r\n\r\n      // 找出在可见范围内的页面\r\n      const newVisiblePages = [];\r\n      for (let i = 0; i < pageCount.value; i++) {\r\n        const pageStart = pageOffsets.value[i];\r\n        const pageEnd = pageStart + pageHeights.value[i];\r\n\r\n        if (pageEnd > startY && pageStart < endY) {\r\n          newVisiblePages.push({\r\n            pageNumber: i + 1,\r\n            offset: pageOffsets.value[i],\r\n            height: pageHeights.value[i]\r\n          });\r\n        }\r\n      }\r\n\r\n      visiblePages.value = newVisiblePages;\r\n\r\n      // 渲染可见页面\r\n      visiblePages.value.forEach(page => {\r\n        renderPage(page.pageNumber);\r\n      });\r\n    };\r\n\r\n    // 滚动事件处理\r\n    const handleScroll = () => {\r\n      if (!scrollContainer.value) return;\r\n\r\n      requestAnimationFrame(() => {\r\n        updateVisiblePages();\r\n      });\r\n    };\r\n\r\n    // 窗口大小变化处理\r\n    const handleResize = () => {\r\n      if (pdfDoc.value) {\r\n        calculatePageDimensions().then(() => {\r\n          updateVisiblePages();\r\n        });\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      loadPDF();\r\n      window.addEventListener('resize', handleResize);\r\n    });\r\n\r\n    onUnmounted(() => {\r\n      window.removeEventListener('resize', handleResize);\r\n    });\r\n\r\n    return {\r\n      scrollContainer,\r\n      pageCanvases,\r\n      pdfDoc,\r\n      pageCount,\r\n      totalHeight,\r\n      visiblePages,\r\n      loading,\r\n      handleScroll\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pdf-viewer-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n}\r\n\r\n.pdf-scroll-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n}\r\n\r\n.pdf-pages-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.pdf-page-container {\r\n  position: absolute;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.pdf-page-container canvas {\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.loading-indicator {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}